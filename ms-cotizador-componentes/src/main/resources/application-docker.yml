spring:
  application:
    name: cotizador-componentes-api
  
  datasource:
    url: jdbc:mysql://${DB_HOST:mysql-componentes}:${DB_PORT:3306}/cotizador_componentes_db?serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false
    username: ${DB_USERNAME:componentes_user}
    password: ${DB_PASSWORD:componentes_pass}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: false
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
    show-sql: false
  
  sql:
    init:
      mode: never # Los scripts se ejecutan en el contenedor MySQL

# Configuración específica para contenedor
server:
  port: 8082
  servlet:
    context-path: /api/v1
  tomcat:
    max-threads: 200
    min-spare-threads: 10
    max-connections: 8192


# Configuración JWT para Docker
jwt:
  ms-seguridad:
    base-url: ${JWT_MS_SEGURIDAD_BASE_URL:http://ms-seguridad:8081}
    context-path: ${JWT_MS_SEGURIDAD_CONTEXT_PATH:/api/v1/seguridad}
    timeout: ${JWT_MS_SEGURIDAD_TIMEOUT:15000}
    connect-timeout: ${JWT_MS_SEGURIDAD_CONNECT_TIMEOUT:10000}
  expected-issuer: ${JWT_EXPECTED_ISSUER:ms-seguridad}
  cache-timeout-ms: ${JWT_CACHE_TIMEOUT_MS:300000}
  jwks:
    refresh-interval-ms: ${JWT_JWKS_REFRESH_INTERVAL_MS:300000}
    max-retries: ${JWT_JWKS_MAX_RETRIES:5}
    initial-delay-ms: ${JWT_JWKS_INITIAL_DELAY_MS:15000}
  # Configuración de rotación reactiva de llaves para Docker
  key-rotation:
    enabled: ${JWT_KEY_ROTATION_ENABLED:true}          # Habilitar rotación reactiva
    security-alert-threshold: ${JWT_SECURITY_ALERT_THRESHOLD:3}  # Alertas después de N intentos con KID inválido
    log-rotation-events: ${JWT_LOG_ROTATION_EVENTS:true}         # Registrar eventos de rotación
    cleanup-old-keys: ${JWT_CLEANUP_OLD_KEYS:true}              # Limpiar llaves anteriores después de rotación
  # Configuración de validación de sesiones
  session-validation:
    enabled: ${JWT_SESSION_VALIDATION_ENABLED:true}             # Habilitar validación de sesiones en JWT

# Configuración de Sesiones para Docker
session:
  cache:
    ttl-ms: ${SESSION_CACHE_TTL_MS:30000}          # TTL del caché de sesiones (30 segundos)
    max-size: ${SESSION_CACHE_MAX_SIZE:1000}       # Tamaño máximo del caché
    enabled: ${SESSION_CACHE_ENABLED:true}         # Habilitar caché de sesiones
  validation:
    timeout-ms: ${SESSION_VALIDATION_TIMEOUT_MS:10000}    # Timeout para validación de sesiones (más alto para Docker)
    max-retries: ${SESSION_VALIDATION_MAX_RETRIES:5}      # Máximo número de reintentos (más alto para Docker)
    retry-delay-ms: ${SESSION_VALIDATION_RETRY_DELAY_MS:2000}  # Delay entre reintentos (más alto para Docker)

# Configuración de seguridad para Docker - Deshabilitar Basic Auth  
security:
  basic:
    enabled: false
    username: ${SECURITY_USERNAME:admin}
    password: ${SECURITY_PASSWORD:admin123}
    realm: "Componentes API - Docker JWT Only"

# Configuración de Kafka para Docker
kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
  producer:
    enabled: ${KAFKA_PRODUCER_ENABLED:true}
    batch-size: ${KAFKA_PRODUCER_BATCH_SIZE:32768}
    linger-ms: ${KAFKA_PRODUCER_LINGER_MS:20}
    buffer-memory: ${KAFKA_PRODUCER_BUFFER_MEMORY:67108864}
    compression-type: ${KAFKA_PRODUCER_COMPRESSION:gzip}
    retries: ${KAFKA_PRODUCER_RETRIES:5}
    retry-backoff-ms: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS:1000}
    retry-backoff-max-ms: ${KAFKA_PRODUCER_RETRY_BACKOFF_MAX_MS:2000}
    max-in-flight: ${KAFKA_PRODUCER_MAX_IN_FLIGHT:5}
    acks: ${KAFKA_PRODUCER_ACKS:all}
    enable-idempotence: ${KAFKA_PRODUCER_IDEMPOTENCE:true}
    request-timeout-ms: ${KAFKA_PRODUCER_REQUEST_TIMEOUT:45000}
    delivery-timeout-ms: ${KAFKA_PRODUCER_DELIVERY_TIMEOUT:180000}
  topics:
    componentes-changes: ${KAFKA_TOPIC_COMPONENTES_CHANGES:componentes.changes}
    promociones-changes: ${KAFKA_TOPIC_PROMOCIONES_CHANGES:promociones.changes}
    pcs-changes: ${KAFKA_TOPIC_PCS_CHANGES:pcs.changes}
  monitoring:
    log-events: ${KAFKA_LOG_EVENTS:true}
    log-level: ${KAFKA_LOG_LEVEL:INFO}

# Configuración completa de Spring Boot Actuator para Docker
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,prometheus,loggers
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    info:
      enabled: true
    metrics:
      enabled: true
  health:
    db:
      enabled: true
    diskspace:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  info:
    build:
      enabled: true
    git:
      mode: full
    env:
      enabled: true

# Logging optimizado para contenedores
logging:
  level:
    mx.com.qtx: INFO
    mx.com.qtx.cotizador.security: DEBUG
    mx.com.qtx.cotizador.kafka: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type: WARN
    com.zaxxer.hikari: WARN
    org.springframework.boot: WARN
    org.springframework.boot.autoconfigure: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n"
  file:
    name: /app/logs/componentes-docker.log
  logback:
    rollingpolicy:
      max-file-size: 50MB
      max-history: 10
      total-size-cap: 500MB 