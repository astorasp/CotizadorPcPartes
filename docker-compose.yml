services:
  # ===============================================
  # INFRAESTRUCTURA KAFKA Y BASES DE DATOS
  # ===============================================
  
  # Apache Kafka 4.0.0 en modo KRaft (sin Zookeeper)
  kafka:
    image: apache/kafka:4.0.0
    container_name: cotizador-kafka
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'          # Est√° usando 121.53% CPU (>1 core)
          memory: 768M         # Buffer sobre 424MB actuales
        reservations:
          cpus: '1.0'          # Garant√≠a m√≠nima
          memory: 512M
    environment:
      # Configuraci√≥n KRaft (sin Zookeeper)
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Configuraci√≥n de topics y replicaci√≥n
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Configuraci√≥n de log y limpieza
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      # Timezone
      TZ: America/Mazatlan
    ports:
      - "9092:9092"  # Puerto expuesto para conectores externos si es necesario
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./kafka-config:/etc/kafka/config
    networks:
      - cotizador-network
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  # Kafka Connect con Debezium para CDC
  kafka-connect:
    image: quay.io/debezium/connect:3.0
    container_name: cotizador-kafka-connect
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 6.78% CPU
          memory: 768M         # Buffer sobre 461MB actuales
        reservations:
          cpus: '0.5'          # Garant√≠a m√≠nima
          memory: 256M
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: cotizador-connect
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      # Configuraci√≥n de conectores
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
      # Timezone
      TZ: America/Mazatlan
    ports:
      - "8083:8083"  # Puerto expuesto para configuraci√≥n de conectores
    networks:
      - cotizador-network
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 120s


  # Configuraci√≥n autom√°tica de conectores Debezium
  # Creaci√≥n de topics de historia
  history-topics-setup:
    image: apache/kafka:4.0.0
    container_name: cotizador-history-topics-setup
    networks:
      - cotizador-network
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Creando topics de historia de base de datos...' &&
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic dbhistory.componentes --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=604800000 --if-not-exists &&
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic dbhistory.cotizaciones --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=604800000 --if-not-exists &&
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic dbhistory.pedidos --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=604800000 --if-not-exists &&
        echo 'Topics de historia creados exitosamente'
      "
    restart: "no"

  # Configuraci√≥n autom√°tica de conectores Debezium
  connectors-setup:
    image: curlimages/curl:8.10.1
    container_name: cotizador-connectors-setup
    volumes:
      - ./kafka-config:/kafka-config:ro
    networks:
      - cotizador-network
    depends_on:
      kafka-connect:
        condition: service_healthy
      history-topics-setup:
        condition: service_completed_successfully
    command: >
      sh -c "
        echo 'Esperando Kafka Connect...' &&
        sleep 30 &&
        echo 'Configurando conectores CDC...' &&
        success_count=0 &&
        total_count=0 &&
        for connector in /kafka-config/connectors/*.json; do
          connector_name=$$(basename \"$$connector\" .json)
          total_count=$$((total_count + 1))
          echo \"Configurando conector: $$connector_name\" &&
          curl -X DELETE http://kafka-connect:8083/connectors/$$connector_name || true &&
          sleep 2 &&
          if curl -X POST -H 'Content-Type: application/json' -d @$$connector http://kafka-connect:8083/connectors | grep -q '\"name\"'; then
            echo \"‚úÖ Conector $$connector_name: CREADO\" &&
            success_count=$$((success_count + 1))
          else
            echo \"‚ùå Conector $$connector_name: ERROR\"
          fi
        done &&
        echo \"Resultado: $$success_count/$$total_count conectores creados\" &&
        if [ $$success_count -eq $$total_count ]; then
          echo 'üéâ Conectores CDC configurados exitosamente'
        else
          echo '‚ö†Ô∏è Algunos conectores fallaron - revisar logs'
        fi
      "
    restart: "no"

  # Base de datos MySQL para Seguridad
  mysql-seguridad:
    image: mysql:8.4.4
    container_name: seguridad-mysql
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 0.48% CPU
          memory: 768M         # Buffer sobre 452MB actuales
        reservations:
          cpus: '0.25'         # Garant√≠a m√≠nima
          memory: 256M
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_SEGURIDAD_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_SEGURIDAD_DATABASE}
      MYSQL_USER: ${MYSQL_SEGURIDAD_USER}
      MYSQL_PASSWORD: ${MYSQL_SEGURIDAD_PASSWORD}
      MYSQL_ROOT_HOST: '%'
      TZ: America/Mazatlan
      # Forzar UTF-8 durante inicializaci√≥n
      MYSQL_INITDB_SKIP_TZINFO: 1
    command: 
      - --defaults-extra-file=/etc/mysql/conf.d/mysql-debezium.cnf
      - --character-set-server=utf8mb4 
      - --collation-server=utf8mb4_unicode_ci
      - --server-id=184058
    # PUERTO NO EXPUESTO - Solo acceso interno
    volumes:
      - ./ms-seguridad/scripts/seguridad_ddl.sql:/docker-entrypoint-initdb.d/01-seguridad-ddl.sql
      - ./kafka-config/mysql-debezium.cnf:/etc/mysql/conf.d/mysql-debezium.cnf
    networks:
      - cotizador-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "seguridad_user", "-pseguridad_pass"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Base de datos MySQL para ms-cotizador-componentes
  mysql-componentes:
    image: mysql:8.4.4
    container_name: componentes-mysql
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 0.47% CPU
          memory: 768M         # Buffer sobre 452MB actuales
        reservations:
          cpus: '0.25'         # Garant√≠a m√≠nima
          memory: 256M
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: cotizador_componentes_db
      MYSQL_USER: componentes_user
      MYSQL_PASSWORD: componentes_pass
      MYSQL_ROOT_HOST: '%'
      TZ: America/Mazatlan
      # Forzar UTF-8 durante inicializaci√≥n
      MYSQL_INITDB_SKIP_TZINFO: 1
    command: 
      - --defaults-extra-file=/etc/mysql/conf.d/mysql-debezium.cnf
      - --character-set-server=utf8mb4 
      - --collation-server=utf8mb4_unicode_ci
      - --server-id=184054
    # PUERTO NO EXPUESTO - Solo acceso interno
    volumes:
      - ./ms-cotizador-componentes/sql/ddl.sql:/docker-entrypoint-initdb.d/01-componentes-ddl.sql
      - ./ms-cotizador-componentes/sql/dml.sql:/docker-entrypoint-initdb.d/02-componentes-dml.sql
      - ./kafka-config/mysql-init-scripts/debezium-componentes.sql:/docker-entrypoint-initdb.d/03-debezium-componentes.sql
      - ./kafka-config/mysql-debezium.cnf:/etc/mysql/conf.d/mysql-debezium.cnf
    networks:
      - cotizador-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "componentes_user", "-pcomponentes_pass"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Base de datos MySQL para ms-cotizador-cotizaciones
  mysql-cotizaciones:
    image: mysql:8.4.4
    container_name: cotizaciones-mysql
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 0.45% CPU
          memory: 768M         # Buffer sobre 444MB actuales
        reservations:
          cpus: '0.25'         # Garant√≠a m√≠nima
          memory: 256M
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: cotizador_cotizaciones_db
      MYSQL_USER: cotizaciones_user
      MYSQL_PASSWORD: cotizaciones_pass
      MYSQL_ROOT_HOST: '%'
      TZ: America/Mazatlan
      # Forzar UTF-8 durante inicializaci√≥n
      MYSQL_INITDB_SKIP_TZINFO: 1
    command: 
      - --defaults-extra-file=/etc/mysql/conf.d/mysql-debezium.cnf
      - --character-set-server=utf8mb4 
      - --collation-server=utf8mb4_unicode_ci
      - --server-id=184055
    # PUERTO NO EXPUESTO - Solo acceso interno
    volumes:
      - ./ms-cotizador-cotizaciones/sql/ddl.sql:/docker-entrypoint-initdb.d/01-cotizaciones-ddl.sql
      - ./ms-cotizador-cotizaciones/sql/dml.sql:/docker-entrypoint-initdb.d/02-cotizaciones-dml.sql
      - ./kafka-config/mysql-init-scripts/debezium-cotizaciones.sql:/docker-entrypoint-initdb.d/03-debezium-cotizaciones.sql
      - ./kafka-config/mysql-debezium.cnf:/etc/mysql/conf.d/mysql-debezium.cnf
    networks:
      - cotizador-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "cotizaciones_user", "-pcotizaciones_pass"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Base de datos MySQL para ms-cotizador-pedidos
  mysql-pedidos:
    image: mysql:8.4.4
    container_name: pedidos-mysql
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 0.48% CPU
          memory: 768M         # Buffer sobre 441MB actuales
        reservations:
          cpus: '0.25'         # Garant√≠a m√≠nima
          memory: 256M
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: cotizador_pedidos_db
      MYSQL_USER: pedidos_user
      MYSQL_PASSWORD: pedidos_pass
      MYSQL_ROOT_HOST: '%'
      TZ: America/Mazatlan
      # Forzar UTF-8 durante inicializaci√≥n
      MYSQL_INITDB_SKIP_TZINFO: 1
    command: 
      - --defaults-extra-file=/etc/mysql/conf.d/mysql-debezium.cnf
      - --character-set-server=utf8mb4 
      - --collation-server=utf8mb4_unicode_ci
      - --server-id=184056
    # PUERTO NO EXPUESTO - Solo acceso interno
    volumes:
      - ./ms-cotizador-pedidos/sql/ddl.sql:/docker-entrypoint-initdb.d/01-pedidos-ddl.sql
      - ./ms-cotizador-pedidos/sql/dml.sql:/docker-entrypoint-initdb.d/02-pedidos-dml.sql
      - ./kafka-config/mysql-init-scripts/debezium-pedidos.sql:/docker-entrypoint-initdb.d/03-debezium-pedidos.sql
      - ./kafka-config/mysql-debezium.cnf:/etc/mysql/conf.d/mysql-debezium.cnf
    networks:
      - cotizador-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "pedidos_user", "-ppedidos_pass"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # ===============================================
  # MICROSERVICIOS
  # ===============================================

  # Microservicio de Seguridad
  ms-seguridad:
    build:
      context: ./ms-seguridad
      dockerfile: Dockerfile
    container_name: ms-seguridad
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 0.42% CPU
          memory: 1G           # Buffer sobre 431MB actuales (Java app)
        reservations:
          cpus: '0.25'         # Garant√≠a m√≠nima
          memory: 256M
    environment:
      # Base de datos
      DB_HOST: mysql-seguridad
      DB_PORT: 3306
      DB_USERNAME: ${MYSQL_SEGURIDAD_USER}
      DB_PASSWORD: ${MYSQL_SEGURIDAD_PASSWORD}
      # JWT Configuration
      JWT_ACCESS_TOKEN_DURATION: ${JWT_ACCESS_TOKEN_DURATION}
      JWT_REFRESH_TOKEN_DURATION: ${JWT_REFRESH_TOKEN_DURATION}
      JWT_ISSUER: ${JWT_ISSUER}
      # JWT Rate Limiting Configuration
      JWT_RATE_LIMITING_ENABLED: ${JWT_RATE_LIMITING_ENABLED}
      JWT_MAX_REQUESTS_PER_MINUTE: ${JWT_MAX_REQUESTS_PER_MINUTE}
      JWT_MAX_REQUESTS_PER_HOUR: ${JWT_MAX_REQUESTS_PER_HOUR}
      # Seguridad
      SECURITY_USERNAME: ${SECURITY_USERNAME}
      SECURITY_PASSWORD: ${SECURITY_PASSWORD}
      # Session Cleanup Configuration
      SESSION_CLEANUP_ENABLED: ${SESSION_CLEANUP_ENABLED}
      SESSION_CLEANUP_INTERVAL_SECONDS: ${SESSION_CLEANUP_INTERVAL_SECONDS}
      # Java
      JAVA_OPTS: "${SEGURIDAD_JAVA_OPTS}"
      # Spring profiles
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      # Timezone
      TZ: America/Mazatlan
    # PUERTOS NO EXPUESTOS - Solo acceso a trav√©s del gateway
    networks:
      - cotizador-network
    depends_on:
      mysql-seguridad:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8081/actuator/health || nc -z localhost 8081"]
      timeout: 15s
      retries: 8
      interval: 30s
      start_period: 120s

  # Microservicio de Componentes
  ms-cotizador-componentes:
    build:
      context: ./ms-cotizador-componentes
      dockerfile: Dockerfile
    container_name: ms-cotizador-componentes
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 0.12% CPU
          memory: 1G           # Buffer sobre 618MB actuales (Java app)
        reservations:
          cpus: '0.25'         # Garant√≠a m√≠nima
          memory: 256M
    environment:
      # Base de datos
      DB_HOST: mysql-componentes
      DB_PORT: 3306
      DB_USERNAME: componentes_user
      DB_PASSWORD: componentes_pass
      # Seguridad
      SECURITY_USERNAME: ${SECURITY_USERNAME}
      SECURITY_PASSWORD: ${SECURITY_PASSWORD}
      # JWT Configuration
      JWT_MS_SEGURIDAD_BASE_URL: http://ms-seguridad:8081
      JWT_MS_SEGURIDAD_CONTEXT_PATH: /api/v1/seguridad
      JWT_EXPECTED_ISSUER: ${JWT_ISSUER}
      JWT_CACHE_TIMEOUT_MS: ${JWT_CACHE_TIMEOUT_MS}
      JWT_JWKS_REFRESH_INTERVAL_MS: ${JWT_JWKS_REFRESH_INTERVAL_MS}
      JWT_JWKS_MAX_RETRIES: ${JWT_JWKS_MAX_RETRIES}
      JWT_JWKS_INITIAL_DELAY_MS: ${JWT_JWKS_INITIAL_DELAY_MS}
      JWT_MS_SEGURIDAD_TIMEOUT: ${JWT_MS_SEGURIDAD_TIMEOUT}
      JWT_MS_SEGURIDAD_CONNECT_TIMEOUT: ${JWT_MS_SEGURIDAD_CONNECT_TIMEOUT}
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Java
      JAVA_OPTS: "${COMPONENTES_JAVA_OPTS:-'-Xms512m -Xmx1024m'}"
      # Spring profiles
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      # Timezone
      TZ: America/Mazatlan
    # PUERTO NO EXPUESTO - Solo acceso a trav√©s del gateway
    networks:
      - cotizador-network
    depends_on:
      mysql-componentes:
        condition: service_healthy
      ms-seguridad:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8082/actuator/health || nc -z localhost 8082"]
      timeout: 15s
      retries: 8
      interval: 30s
      start_period: 120s

  # Microservicio de Cotizaciones
  ms-cotizador-cotizaciones:
    build:
      context: ./ms-cotizador-cotizaciones
      dockerfile: Dockerfile
    container_name: ms-cotizador-cotizaciones
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Est√° usando 0.43% CPU
          memory: 1G           # Buffer sobre 623MB actuales (Java app)
        reservations:
          cpus: '0.25'         # Garant√≠a m√≠nima
          memory: 256M
    environment:
      # Base de datos
      DB_HOST: mysql-cotizaciones
      DB_PORT: 3306
      DB_USERNAME: cotizaciones_user
      DB_PASSWORD: cotizaciones_pass
      # Seguridad
      SECURITY_USERNAME: ${SECURITY_USERNAME}
      SECURITY_PASSWORD: ${SECURITY_PASSWORD}
      # JWT Configuration
      JWT_MS_SEGURIDAD_BASE_URL: http://ms-seguridad:8081
      JWT_MS_SEGURIDAD_CONTEXT_PATH: /api/v1/seguridad
      JWT_EXPECTED_ISSUER: ${JWT_ISSUER}
      JWT_CACHE_TIMEOUT_MS: ${JWT_CACHE_TIMEOUT_MS}
      JWT_JWKS_REFRESH_INTERVAL_MS: ${JWT_JWKS_REFRESH_INTERVAL_MS}
      JWT_JWKS_MAX_RETRIES: ${JWT_JWKS_MAX_RETRIES}
      JWT_JWKS_INITIAL_DELAY_MS: ${JWT_JWKS_INITIAL_DELAY_MS}
      JWT_MS_SEGURIDAD_TIMEOUT: ${JWT_MS_SEGURIDAD_TIMEOUT}
      JWT_MS_SEGURIDAD_CONNECT_TIMEOUT: ${JWT_MS_SEGURIDAD_CONNECT_TIMEOUT}
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Java
      JAVA_OPTS: "${COTIZACIONES_JAVA_OPTS:-'-Xms512m -Xmx1024m'}"
      # Spring profiles
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      # Timezone
      TZ: America/Mazatlan
    # PUERTO NO EXPUESTO - Solo acceso a trav√©s del gateway
    networks:
      - cotizador-network
    depends_on:
      mysql-cotizaciones:
        condition: service_healthy
      ms-seguridad:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8083/actuator/health || nc -z localhost 8083"]
      timeout: 15s
      retries: 8
      interval: 30s
      start_period: 120s

  # Microservicio de Pedidos
  ms-cotizador-pedidos:
    build:
      context: ./ms-cotizador-pedidos
      dockerfile: Dockerfile
    container_name: ms-cotizador-pedidos
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'          # Est√° usando 9.68% CPU (el m√°s activo)
          memory: 1G           # Buffer sobre 648MB actuales (Java app)
        reservations:
          cpus: '0.5'          # Garant√≠a m√≠nima mayor
          memory: 256M
    environment:
      # Base de datos
      DB_HOST: mysql-pedidos
      DB_PORT: 3306
      DB_USERNAME: pedidos_user
      DB_PASSWORD: pedidos_pass
      # Seguridad
      SECURITY_USERNAME: ${SECURITY_USERNAME}
      SECURITY_PASSWORD: ${SECURITY_PASSWORD}
      # JWT Configuration
      JWT_MS_SEGURIDAD_BASE_URL: http://ms-seguridad:8081
      JWT_MS_SEGURIDAD_CONTEXT_PATH: /api/v1/seguridad
      JWT_EXPECTED_ISSUER: ${JWT_ISSUER}
      JWT_CACHE_TIMEOUT_MS: ${JWT_CACHE_TIMEOUT_MS}
      JWT_JWKS_REFRESH_INTERVAL_MS: ${JWT_JWKS_REFRESH_INTERVAL_MS}
      JWT_JWKS_MAX_RETRIES: ${JWT_JWKS_MAX_RETRIES}
      JWT_JWKS_INITIAL_DELAY_MS: ${JWT_JWKS_INITIAL_DELAY_MS}
      JWT_MS_SEGURIDAD_TIMEOUT: ${JWT_MS_SEGURIDAD_TIMEOUT}
      JWT_MS_SEGURIDAD_CONNECT_TIMEOUT: ${JWT_MS_SEGURIDAD_CONNECT_TIMEOUT}
      # Client Configuration for other microservices
      MS_COMPONENTES_BASE_URL: http://ms-cotizador-componentes:8082
      MS_COTIZACIONES_BASE_URL: http://ms-cotizador-cotizaciones:8083
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Java
      JAVA_OPTS: "${PEDIDOS_JAVA_OPTS:-'-Xms512m -Xmx1024m'}"
      # Spring profiles
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      # Timezone
      TZ: America/Mazatlan
    # PUERTO NO EXPUESTO - Solo acceso a trav√©s del gateway
    networks:
      - cotizador-network
    depends_on:
      mysql-pedidos:
        condition: service_healthy
      ms-seguridad:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8084/actuator/health || nc -z localhost 8084"]
      timeout: 15s
      retries: 8
      interval: 30s
      start_period: 120s

  # Frontend Vue.js
  frontend:
    build:
      context: ./portal-cotizador
      dockerfile: Dockerfile
    container_name: cotizador-frontend-vue
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'          # Est√° usando 0.00% CPU
          memory: 128M         # Buffer sobre 10MB actuales
        reservations:
          cpus: '0.1'          # Garant√≠a m√≠nima
          memory: 32M
    environment:
      # Timezone
      TZ: America/Mazatlan
    # PUERTO NO EXPUESTO - Solo acceso a trav√©s del gateway
    networks:
      - cotizador-network
    depends_on:
      ms-seguridad:
        condition: service_healthy
      ms-cotizador-componentes:
        condition: service_healthy
      ms-cotizador-cotizaciones:
        condition: service_healthy
      ms-cotizador-pedidos:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 10s
  kafka-ui:
      image: provectuslabs/kafka-ui:latest
      container_name: kafka-ui
      ports:
        - "8080:8080"
      environment:
        KAFKA_CLUSTERS_0_NAME: local-kafka
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
        KAFKA_CLUSTERS_0_READONLY: ${KAFKA_UI_READONLY:-false}
        # HTTP Basic Authentication
        AUTH_TYPE: "LOGIN_FORM"
        SPRING_SECURITY_USER_NAME: ${KAFKA_UI_AUTH_USERNAME:-admin}
        SPRING_SECURITY_USER_PASSWORD: ${KAFKA_UI_AUTH_PASSWORD:-kafka123}
      depends_on:
        - kafka
      networks:
        - cotizador-network
  # API Gateway con Nginx
  gateway:
    build:
      context: ./nginx-gateway
      dockerfile: Dockerfile
    container_name: cotizador-gateway
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'          # Est√° usando 0.00% CPU
          memory: 128M         # Buffer sobre 10MB actuales
        reservations:
          cpus: '0.1'          # Garant√≠a m√≠nima
          memory: 32M
    environment:
      # Timezone
      TZ: America/Mazatlan
    ports:
      - "80:80"  # √öNICO PUERTO EXPUESTO
    networks:
      - cotizador-network
    depends_on:
      ms-seguridad:
        condition: service_healthy
      ms-cotizador-componentes:
        condition: service_healthy
      ms-cotizador-cotizaciones:
        condition: service_healthy
      ms-cotizador-pedidos:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 10s

# Red personalizada
networks:
  cotizador-network:
    driver: bridge
    name: cotizador-network

# Vol√∫menes persistentes
volumes:
  kafka_data:
    driver: local
    name: cotizador_kafka_data